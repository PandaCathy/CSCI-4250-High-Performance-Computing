/*
Cathy Fung
CSCI 4250 HW2
*/

#include <iostream>
#include <time.h>

using namespace std;

#define TILE_WIDTH 16
#define iceil(num,den) (num+den-1)/den

//Prints the image on screen
void printMatrix(float* img, int w, int h) {
	for (int i = 0; i < h; i++) {
		for (int j = 0; j < w; j++) {
			cout << img[i*w + j] << " ";
		}
		cout << endl;
	}
	cout << endl;
}

__global__ void matrixMulKernel_NoSM(float *d_M, float *d_N, float *d_P, int width) {
	int col = blockIdx.x * blockDim.x + threadIdx.x;

	if (col < width ) {
		float pValue = 0;
		for (int k = 0; k < width; k++)
		{
			pValue += d_M[col*width + k] * d_N[k];
		}
		d_P[col] = pValue;
	}
}

__global__ void matrixMulKernel_SM(float *d_M, float *d_N, float *d_P, int width) {

	__shared__ float Ns[TILE_WIDTH];

	int bx = blockIdx.x;
	int tx = threadIdx.x; 
	//calculate the column index
	int row = bx * TILE_WIDTH + tx;

	float pValue = 0;

	for (int m = 0; m < width / TILE_WIDTH; m++) {

		Ns[tx] = d_N[ m * TILE_WIDTH + tx];
		__syncthreads();

		for (int k = 0; k < TILE_WIDTH; k++)
			pValue += d_M[ m * TILE_WIDTH + row * width + k] * Ns[k];
		__syncthreads();
	}
	d_P[row] = pValue;
}

void matrixMul(float* M, float* N, float* P, int width) {

	//This number of bytes are going be allocated and transferred
	int size = width * width * sizeof(float);

	float *d_M, *d_N, *d_P; //Device Pointers

	//Allocate memory from GPU for my input and output array
	cudaMalloc((void**)&d_M, size);
	cudaMalloc((void**)&d_N, size);
	cudaMalloc((void**)&d_P, size);

	//Transfer data to the GPU
	cudaMemcpy(d_M, M, size, cudaMemcpyHostToDevice);
	cudaMemcpy(d_N, N, size, cudaMemcpyHostToDevice);

	dim3 myBlockDim(TILE_WIDTH, TILE_WIDTH, 1);
	dim3 myGridDim(iceil(width, TILE_WIDTH), iceil(width, TILE_WIDTH), 1);

	//===== Not using Shared Memory ===============
	matrixMulKernel_NoSM << <myGridDim, myBlockDim >> > (d_M, d_N, d_P, width);
	cudaMemcpy(P, d_P, size, cudaMemcpyDeviceToHost);

	printMatrix(P, 1, width);

	//===== Using Shared Memory ===================
	matrixMulKernel_SM << <myGridDim, myBlockDim >> > (d_M, d_N, d_P, width);
	cudaMemcpy(P, d_P, size, cudaMemcpyDeviceToHost);

	printMatrix(P, 1, width);

	//----------------------------------------------------
	cudaFree(d_M);
	cudaFree(d_N);
	cudaFree(d_P);
}

int main() {

	srand(time(0));

	int width = 10;
	float *M = new float[width*width];
	float *N = new float[width];
	float *P = new float[width];

	//Load value to the image
	for (int i = 0; i < width; i++)
		for (int j = 0; j < width; j++) {
			M[i*width + j] = rand() % 10;
			N[j] = rand() % 10;
		}

	printMatrix(M, width, width);
	printMatrix(N, 1, width);

	matrixMul(M, N, P, width);


	return 0;
}
